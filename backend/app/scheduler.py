# backend/app/scheduler.py
import os
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, date, timedelta
from sqlalchemy import func
from flask import current_app

from .models import User, Medication, MedicationLog, Notification, SystemSetting, Appointment
from .extensions import db
from .email_service import send_email


def create_internal_notification(user_id, message, link_to=None):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Notification ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô Log"""
    notif = Notification(user_id=user_id, message=message, link_to=link_to)
    db.session.add(notif)


def format_minutes_to_readable_time(minutes):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô "X ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á Y ‡∏ô‡∏≤‡∏ó‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "Y ‡∏ô‡∏≤‡∏ó‡∏µ"
    """
    if minutes < 1:
        return "‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
    if minutes < 60:
        return f"{minutes} ‡∏ô‡∏≤‡∏ó‡∏µ"
    
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    if remaining_minutes == 0:
        return f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"
    
    return f"{hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {remaining_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ"


def check_medicine_schedule(app):
    """
    Job ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ú‡πà‡∏≤‡∏ô "‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
    """
    with app.app_context():
        now = datetime.now()
        today = now.date()

        try:
            reminder_before_min = int(SystemSetting.query.filter_by(key='REMINDER_BEFORE_MINUTES').first().value)
            alert_after_min = int(SystemSetting.query.filter_by(key='ALERT_AFTER_MINUTES').first().value)
        except (AttributeError, ValueError):
            reminder_before_min = 15
            alert_after_min = 15
        
        meds_for_today = Medication.query.filter(
            Medication.start_date <= today,
            (Medication.end_date.is_(None)) | (Medication.end_date >= today)
        ).all()

        for med in meds_for_today:
            try:
                med_time_obj = datetime.strptime(med.time_to_take, '%H:%M').time()
                med_datetime_today = datetime.combine(today, med_time_obj)
            except ValueError:
                continue

            log_exists_today = MedicationLog.query.filter(
                MedicationLog.medication_id == med.id, 
                db.func.date(MedicationLog.taken_at) == today
            ).first()

            if log_exists_today:
                continue

            elder = med.patient
            elder_name = f"{elder.first_name} {elder.last_name}"
            med_info_str = f"{med.name} ({med.time_to_take})"

            # A. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
            time_until_med = (med_datetime_today - now).total_seconds() / 60
            if reminder_before_min - 1 < time_until_med <= reminder_before_min:
                pre_reminder_log = f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤: {med_info_str}"
                notif_sent_today = Notification.query.filter(
                    Notification.message == pre_reminder_log,
                    db.func.date(Notification.created_at) == today,
                    (Notification.user_id == elder.id)
                ).first()

                if not notif_sent_today and elder.email:
                    send_email(
                        subject=f"‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {reminder_before_min} ‡∏ô‡∏≤‡∏ó‡∏µ",
                        recipients=[elder.email],
                        text_body=f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì {elder.first_name},\n\n‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {reminder_before_min} ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ '{med.name}' ({med.time_to_take} ‡∏ô.) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏∞‡∏Ñ‡∏∞"
                    )
                    create_internal_notification(elder.id, pre_reminder_log)

            # B. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏≠‡∏î‡∏µ"
            if now.hour == med_datetime_today.hour and now.minute == med_datetime_today.minute:
                if elder.email:
                    send_email(
                        subject=f"üîî ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤: {med.name}",
                        recipients=[elder.email],
                        text_body=f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì {elder.first_name},\n\n‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ '{med.name}' ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\n‡πÄ‡∏ß‡∏•‡∏≤: {med.time_to_take} ‡∏ô."
                    )
                manager_emails = [manager.email for manager in elder.managers if manager.email]
                if manager_emails:
                    send_email(
                        subject=f"üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á {elder_name}",
                        recipients=manager_emails,
                        text_body=f"‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì {elder_name} ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ '{med_info_str}'\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤"
                    )

            # C. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥ (‡∏¢‡∏≤‡∏Ç‡∏≤‡∏î)
            minutes_passed = (now - med_datetime_today).total_seconds() / 60
            if minutes_passed > 0 and (int(minutes_passed) % alert_after_min == 0):
                last_minute_start = now.replace(second=0, microsecond=0) - timedelta(minutes=1)
                reminder_message_log = f"‡∏¢‡∏≤‡∏Ç‡∏≤‡∏î (‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥): {med_info_str} ‡∏Ç‡∏≠‡∏á {elder_name}"
                
                notif_sent_recently = Notification.query.filter(
                    Notification.message.like(f"%{reminder_message_log}%"),
                    Notification.created_at >= last_minute_start
                ).first()

                if not notif_sent_recently:
                    readable_time_passed = format_minutes_to_readable_time(int(minutes_passed))
                    manager_emails = [manager.email for manager in elder.managers if manager.email]
                    if manager_emails:
                        send_email(
                            subject=f"üö® ‡∏¢‡∏≤‡∏Ç‡∏≤‡∏î (‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥)! : {elder_name}",
                            recipients=manager_emails,
                            text_body=f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∏‡∏ì {elder_name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ '{med_info_str}' ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {readable_time_passed}"
                        )
                    if elder.email:
                        send_email(
                            subject=f"üö® ‡∏•‡∏∑‡∏°‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ (‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥): {med.name}",
                            recipients=[elder.email],
                            text_body=f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì {elder.first_name},\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤ '{med.name}' ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {med.time_to_take} ‡∏ô.\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞"
                        )
                    for manager in elder.managers:
                        create_internal_notification(manager.id, reminder_message_log)

        db.session.commit()


def check_today_appointments(app):
    """
    Job ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å "‡∏ô‡∏≤‡∏ó‡∏µ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    """
    with app.app_context():
        now = datetime.now()
        today = now.date()
        
        appointments_today = Appointment.query.filter(
            func.date(Appointment.appointment_datetime) == today,
            Appointment.status == 'pending'
        ).all()

        for appt in appointments_today:
            elder = appt.patient
            elder_name = f"{elder.first_name} {elder.last_name}"
            appt_datetime = appt.appointment_datetime
            appt_time_str = appt_datetime.strftime('%H:%M ‡∏ô.')

            # A. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏≠‡∏î‡∏µ"
            if now.hour == appt_datetime.hour and now.minute == appt_datetime.minute:
                manager_emails = [m.email for m in elder.managers if m.email]
                if manager_emails:
                    send_email(
                        subject=f"‚ÄºÔ∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {elder_name}",
                        recipients=manager_emails,
                        text_body=f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì {elder_name} ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á '{appt.title}' ‡πÄ‡∏ß‡∏•‡∏≤ {appt_time_str} ‡∏ó‡∏µ‡πà {appt.location}"
                    )
                if elder.email:
                    send_email(
                        subject=f'‚ÄºÔ∏è ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: {appt.title}',
                        recipients=[elder.email],
                        text_body=f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì {elder.first_name},\n\n‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á '{appt.title}' ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\n‡πÄ‡∏ß‡∏•‡∏≤: {appt_time_str}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {appt.location}"
                    )

            # B. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥ "‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤"
            minutes_passed = (now - appt_datetime).total_seconds() / 60
            if minutes_passed > 0 and (int(minutes_passed) > 0) and (int(minutes_passed) % 60 == 0):
                last_hour_start = now - timedelta(minutes=60)
                reminder_log_missed = f"‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥): {appt.title}"

                notif_sent_recently = Notification.query.filter(
                    Notification.message.like(f"%{reminder_log_missed}%"),
                    Notification.created_at >= last_hour_start
                ).first()

                if not notif_sent_recently:
                    readable_time_passed = format_minutes_to_readable_time(int(minutes_passed))
                    manager_emails = [m.email for m in elder.managers if m.email]
                    if manager_emails:
                        send_email(
                            subject=f"üö® ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥)! : {elder_name}",
                            recipients=manager_emails,
                            text_body=f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á '{appt.title}' ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì {elder_name} ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {readable_time_passed} ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
                        )
                    for manager in elder.managers:
                        create_internal_notification(manager.id, reminder_log_missed)
        
        db.session.commit()


def check_tomorrow_appointments(app):
    """
    Job ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô (‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô "‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ"
    """
    with app.app_context():
        today = date.today()
        tomorrow = today + timedelta(days=1)
        
        appointments_tomorrow = Appointment.query.filter(
            func.date(Appointment.appointment_datetime) == tomorrow,
            Appointment.status == 'pending'
        ).all()

        for appt in appointments_tomorrow:
            elder = appt.patient
            elder_name = f"{elder.first_name} {elder.last_name}"
            appt_time_str = appt.appointment_datetime.strftime('%H:%M ‡∏ô.')
            
            manager_emails = [manager.email for manager in elder.managers if manager.email]
            if manager_emails:
                send_email(
                    subject=f"üóìÔ∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á {elder_name}",
                    recipients=manager_emails,
                    text_body=f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∏‡∏ì {elder_name} ‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: {appt.title}\n‡πÄ‡∏ß‡∏•‡∏≤: {appt_time_str}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {appt.location}"
                )
            
            if elder.email:
                send_email(
                    subject=f'üóìÔ∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ: {appt.title}',
                    recipients=[elder.email],
                    text_body=f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì {elder.first_name},\n\n‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ({tomorrow.strftime('%d/%m/%Y')})\n\n‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á: {appt.title}\n‡πÄ‡∏ß‡∏•‡∏≤: {appt_time_str}\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {appt.location}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡πà‡∏∞"
                )
        
        db.session.commit()


def init_scheduler(app):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Scheduler"""
    scheduler = BackgroundScheduler(daemon=True)
    
    # Job 1: ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤ (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ)
    scheduler.add_job(
        func=check_medicine_schedule, 
        args=[app], 
        trigger="interval", 
        minutes=1,
        id='check_medicine_schedule_job',
        replace_existing=True
    )
    
    # Job 2: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ)
    scheduler.add_job(
        func=check_today_appointments,
        args=[app],
        trigger='interval',
        minutes=1,
        id='check_today_appointments_job',
        replace_existing=True
    )

    # Job 3: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ" (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ï‡∏≠‡∏ô 7 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤)
    scheduler.add_job(
        func=check_tomorrow_appointments,
        args=[app],
        trigger='cron',
        hour=7,
        minute=0,
        id='check_tomorrow_appointments_job',
        replace_existing=True
    )

    scheduler.start()
    print("‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Email) ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
