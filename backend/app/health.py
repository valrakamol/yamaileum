# backend/app/health.py
from flask import Blueprint, request, jsonify
from .models import User, HealthRecord, Notification
from .extensions import db
from flask_jwt_extended import jwt_required, get_jwt, get_jwt_identity
from datetime import datetime
from calendar import monthrange

# Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
from .email_service import send_email

health_bp = Blueprint('health', __name__, url_prefix='/api/health')


# -----------------------------------------------------------------------------
# Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏≠‡∏™‡∏°. ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
# -----------------------------------------------------------------------------
@health_bp.route('/record/add', methods=['POST'])
@jwt_required()
def add_health_record():
    current_user_id = get_jwt_identity()
    claims = get_jwt()
    
    if claims.get('role') != 'osm':
        return jsonify(msg="‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏≠‡∏™‡∏°. ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"), 403

    # --- *** ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® data ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ *** ---
    data = request.json
    elder_id = data.get('elder_id')
    
    if not elder_id:
        return jsonify(msg="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏"), 400

    osm_user = User.query.get(current_user_id)
    elder = User.query.filter_by(id=elder_id, role='elder').first()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ osm_user ‡πÅ‡∏•‡∏∞ elder ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not osm_user or not elder:
        return jsonify(msg="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏≠‡∏™‡∏°. ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ"), 404
    
    new_record = HealthRecord(
        systolic_bp=data.get('systolic_bp'),
        diastolic_bp=data.get('diastolic_bp'),
        weight=data.get('weight'),
        pulse=data.get('pulse'),
        notes=data.get('notes'),
        user_id=elder.id,
        recorded_by_id=osm_user.id
    )
    db.session.add(new_record)

    # --- Logic ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ---
    alerts = []
    SYSTOLIC_HIGH = 140
    DIASTOLIC_HIGH = 90
    PULSE_LOW = 50
    PULSE_HIGH = 100

    if new_record.systolic_bp and new_record.systolic_bp >= SYSTOLIC_HIGH:
        alerts.append(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡∏ô‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ({new_record.systolic_bp})")
    if new_record.diastolic_bp and new_record.diastolic_bp >= DIASTOLIC_HIGH:
        alerts.append(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ({new_record.diastolic_bp})")
    if new_record.pulse:
        if new_record.pulse <= PULSE_LOW:
            alerts.append(f"‡∏ä‡∏µ‡∏û‡∏à‡∏£‡∏ï‡πà‡∏≥‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ({new_record.pulse})")
        elif new_record.pulse >= PULSE_HIGH:
            alerts.append(f"‡∏ä‡∏µ‡∏û‡∏à‡∏£‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ({new_record.pulse})")

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if alerts:
        elder_name = f"{elder.first_name} {elder.last_name}"
        alert_details = "\n".join([f"- {a}" for a in alerts])

        # ‡∏Å. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡∏∞ ‡∏≠‡∏™‡∏°. ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
        manager_emails = [manager.email for manager in elder.managers if manager.email]
        if manager_emails:
            subject = f"üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {elder_name}"
            body = (
                f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì {elder_name} ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ {datetime.now().strftime('%d/%m/%Y %H:%M')}:\n\n"
                f"{alert_details}\n\n"
                f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
            )
            send_email(subject, manager_emails, body)

        # ‡∏Ç. ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
        if elder.email:
            subject = f"üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            body = (
                f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì {elder.first_name},\n\n"
                f"‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©:\n\n"
                f"{alert_details}\n\n"
                f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡πà‡∏∞"
            )
            send_email(subject, [elder.email], body)

        # (‡∏™‡∏£‡πâ‡∏≤‡∏á Notification log ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
        alert_message_log = f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ({elder_name}): {', '.join(alerts)}"
        for manager in elder.managers:
            notif = Notification(user_id=manager.id, message=alert_message_log)
            db.session.add(notif)
            
    db.session.commit()

    return jsonify(msg="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"), 201

# -----------------------------------------------------------------------------
# Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•/‡∏≠‡∏™‡∏°. ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
# -----------------------------------------------------------------------------
@health_bp.route('/records/elder/<int:elder_id>', methods=['GET'])
@jwt_required()
def get_health_records_for_elder(elder_id):
    current_user_id = get_jwt_identity()
    claims = get_jwt()
    
    if claims.get('role') not in ['caregiver', 'osm', 'elder']:
        return jsonify(msg="‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"), 403

    viewer = User.query.get(current_user_id)
    elder_to_view = User.query.filter_by(id=elder_id, role='elder').first()
    
    if claims.get('role') == 'elder':
        if elder_id != current_user_id:
            return jsonify(msg="‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô"), 403
    elif claims.get('role') == 'caregiver':
        if not viewer or not elder_to_view or elder_to_view not in viewer.managed_elders:
            return jsonify(msg="‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ"), 403
    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'osm' ‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡∏ï‡∏≤‡∏° Logic ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)

    month = request.args.get('month', type=int)
    year = request.args.get('year', type=int)

    query = HealthRecord.query.filter_by(user_id=elder_id)
    if month and year:
        start_date = datetime(year, month, 1)
        end_day = monthrange(year, month)[1]
        end_date = datetime(year, month, end_day, 23, 59, 59)
        query = query.filter(HealthRecord.record_date >= start_date, HealthRecord.record_date <= end_date)

    records = query.order_by(HealthRecord.record_date.desc()).all()
    result = [
        {
            'id': rec.id, 
            'systolic_bp': rec.systolic_bp, 
            'diastolic_bp': rec.diastolic_bp, 
            'weight': rec.weight, 
            'pulse': rec.pulse,
            'notes': rec.notes, 
            'recorded_at': rec.record_date.strftime('%Y-%m-%d %H:%M')
        } for rec in records
    ]
    return jsonify(records=result), 200